name: CI/CD Pipeline - FIAE24M Kassensystem

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

jobs:
  # ==========================================
  # BUILD & TEST JOB
  # ==========================================
  build-and-test:
    name: Build & Test
    runs-on: [ubuntu-latest]
    
    strategy:
      matrix:
        java-version: [17, 21]
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'

    - name: Cache Maven Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Validate Project Structure
      run: |
        echo "Validating project structure..."
        test -f pom.xml || exit 1
        test -d src/main/java || exit 1
        test -d src/test/java || exit 1
        test -f src/main/resources/fxml/main.fxml || exit 1
        echo "✅ Project structure is valid"

    - name: Compile Code
      run: mvn clean compile -B

    - name: Run Unit Tests
      run: mvn test -B
      env:
        DISPLAY: :99

    - name: Generate Test Report
      run: mvn surefire-report:report -B
      if: always()

    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.java-version }}
        path: |
          target/surefire-reports/
          target/site/

  # ==========================================
  # QUALITY ANALYSIS JOB
  # ==========================================
  quality-analysis:
    name: Code Quality Analysis
    runs-on: [ubuntu-latest]
    needs: build-and-test
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

    - name: Run SpotBugs Analysis
      run: mvn spotbugs:check -B
      continue-on-error: true

    - name: Run PMD Analysis
      run: mvn pmd:check -B
      continue-on-error: true

    - name: Run Checkstyle
      run: mvn checkstyle:check -B
      continue-on-error: true

    - name: Generate Code Coverage Report
      run: mvn jacoco:report -B

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload Quality Reports
      uses: actions/upload-artifact@v3
      with:
        name: quality-reports
        path: |
          target/site/spotbugs/
          target/site/pmd/
          target/site/checkstyle/
          target/site/jacoco/

  # ==========================================
  # SECURITY SCAN JOB
  # ==========================================
  security-scan:
    name: Security Scan
    runs-on: [self-hosted, mmbbs3]
    needs: build-and-test

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

    - name: Run OWASP Dependency Check
      run: mvn org.owasp:dependency-check-maven:check -B
      continue-on-error: true

    - name: Upload Security Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: target/dependency-check-report.html

  # ==========================================
  # PACKAGE JOB
  # ==========================================
  package:
    name: Package Application
    runs-on: [self-hosted, mmbbs3]
    needs: [build-and-test, quality-analysis]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

    - name: Package Application
      run: mvn clean package -B -DskipTests

    - name: Create Executable JAR with Dependencies
      run: mvn assembly:single -B

    - name: Generate Application Info
      run: |
        echo "Build Date: $(date)" > target/build-info.txt
        echo "Git Commit: ${{ github.sha }}" >> target/build-info.txt
        echo "Git Branch: ${{ github.ref_name }}" >> target/build-info.txt
        echo "Build Number: ${{ github.run_number }}" >> target/build-info.txt

    - name: Upload Application Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: kassensystem-${{ github.run_number }}
        path: |
          target/*.jar
          target/build-info.txt
          README.md

  # ==========================================
  # DOCUMENTATION JOB
  # ==========================================
  documentation:
    name: Generate Documentation
    runs-on: [self-hosted, mmbbs3]
    needs: build-and-test

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Generate JavaDoc
      run: mvn javadoc:javadoc -B

    - name: Generate Site Documentation
      run: mvn site -B

    - name: Upload Documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: |
          target/site/
          target/apidocs/

  # ==========================================
  # RELEASE JOB
  # ==========================================
  release:
    name: Create Release
    runs-on: [self-hosted, mmbbs3]
    needs: [package, documentation, security-scan]
    if: github.event_name == 'release'

    steps:
    - name: Download Application Artifacts
      uses: actions/download-artifact@v3
      with:
        name: kassensystem-${{ github.run_number }}
        path: ./release

    - name: Download Documentation
      uses: actions/download-artifact@v3
      with:
        name: documentation
        path: ./docs

    - name: Create Release Package
      run: |
        cd release
        zip -r kassensystem-v${{ github.event.release.tag_name }}.zip .
        cd ../docs
        zip -r documentation-v${{ github.event.release.tag_name }}.zip .

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./release/kassensystem-v${{ github.event.release.tag_name }}.zip
        asset_name: kassensystem-v${{ github.event.release.tag_name }}.zip
        asset_content_type: application/zip

    - name: Upload Documentation Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./docs/documentation-v${{ github.event.release.tag_name }}.zip
        asset_name: documentation-v${{ github.event.release.tag_name }}.zip
        asset_content_type: application/zip

  # ==========================================
  # NOTIFICATION JOB
  # ==========================================
  notify:
    name: Send Notifications
    runs-on: [self-hosted, mmbbs3]
    needs: [build-and-test, quality-analysis, security-scan]
    if: always()

    steps:
    - name: Notify on Success
      if: needs.build-and-test.result == 'success' && needs.quality-analysis.result == 'success'
      run: |
        echo "✅ Pipeline erfolgreich abgeschlossen"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Build: ${{ github.run_number }}"

    - name: Notify on Failure
      if: failure()
      run: |
        echo "❌ Pipeline fehlgeschlagen"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Build: ${{ github.run_number }}"
        echo "Fehlerhafte Jobs: ${{ toJSON(needs) }}"
